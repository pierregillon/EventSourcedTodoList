@page "/todolist"
@using EventSourcedTodoList.Actions
@using EventSourcedTodoList.Domain.Todo.List
@inherits BlazorState.BlazorStateComponent

<PageTitle>Todo list</PageTitle>

<h1>Todo list</h1>

<ul>
    @foreach (var item in TodoListItems)
    {
        <li class="task short-padding-left">
            @if (item.IsDone)
            {
                <span class="done">@item.Description</span>
                <span @onclick="() => MarkAsToDo(item.Id)"
                      class="oi oi-action-undo"
                      aria-hidden="true">
                </span>
            }
            else
            {
                <span>@item.Description</span>
                <span @onclick="() => MarkItemAsDone(item.Id)"
                      class="oi oi-check"
                      aria-hidden="true">
                </span>
            }

        </li>
    }
    <li class="addItemInput short-padding-left">
        <InputText @bind-Value="NewTodoItemDescription" @onkeyup="@AddItemToDo"></InputText>
    </li>
</ul>

<style>
    .short-padding-left {
        padding-left: 5px;;
    }

    .task .oi {
        opacity: 0;
        margin-left: 10px;
        cursor: pointer;
    }

    .task:hover .oi {
        opacity: 1;
    }
    
    .task .done {
        text-decoration: line-through;
        color: #B4B4B4;
        font-style: italic;
    }
    
    .addItemInput {
        list-style: disclosure-closed;
    }
    
    .addItemInput input {
        border:0;
        outline:0;
        background-color: transparent;
        padding: 0;
    }
    
    .addItemInput input:focus {
        outline:none!important;
    }
</style>

@code {

    TodoListState State => GetState<TodoListState>();

    private IEnumerable<TodoListItem> TodoListItems => State.Items;
    private string NewTodoItemDescription { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync() => await Mediator.Send(new TodoListState.LoadTodoList());

    private async Task AddItemToDo(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Mediator.Send(new TodoListState.AddNewItem(NewTodoItemDescription));

            NewTodoItemDescription = string.Empty;
        }
    }

    private async Task MarkItemAsDone(Guid itemId) => await Mediator.Send(new TodoListState.MarkItemAsDone(itemId));

    private async Task MarkAsToDo(Guid itemId) => await Mediator.Send(new TodoListState.MarkItemAsToDo(itemId));

}