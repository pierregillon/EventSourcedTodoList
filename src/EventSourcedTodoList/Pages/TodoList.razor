@page "/todolist"
@using EventSourcedTodoList.Actions
@using EventSourcedTodoList.Domain.Todo.List
@inherits BlazorState.BlazorStateComponent

<PageTitle>Todo list</PageTitle>

<h1>Todo list</h1>

<div>
    <InputText @bind-Value="NewTodoItemText"></InputText>

    <button @onclick="AddTodoItem"> Add </button>
</div>

<h2>Items :</h2>

<ul>
    @foreach (var item in TodoListItems)
    {
        <li>
            @if (item.IsDone)
            {
                <span class="done">@item.Description</span>
                <button @onclick="() => MarkAsToDo(item.Id)">
                    <span class="oi oi-action-undo" aria-hidden="true"></span>
                </button>
            }
            else
            {
                <span>@item.Description</span>
                <button @onclick="() => MarkItemAsDone(item.Id)">
                    <span class="oi oi-check" aria-hidden="true"></span>
                </button>
            }

        </li>
    }
</ul>

<style>
    .done {
        text-decoration: line-through;
    }
</style>

@code {

    TodoListState State => GetState<TodoListState>();

    private IEnumerable<TodoListItem> TodoListItems => State.Items;

    string? NewTodoItemText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Mediator.Send(new TodoListState.LoadTodoList());
    }

    private async Task AddTodoItem()
    {
        await Mediator.Send(new TodoListState.AddNewItem(NewTodoItemText));
    }

    private async Task MarkItemAsDone(Guid itemId)
    {
        await Mediator.Send(new TodoListState.MarkItemAsDone(itemId));
    }

    private async Task MarkAsToDo(Guid itemId)
    {
        await Mediator.Send(new TodoListState.MarkItemAsToDo(itemId));
    }

}