@page "/todolist"
@using EventSourcedTodoList.Actions
@using EventSourcedTodoList.Domain.Todo.List
@inherits BlazorState.BlazorStateComponent

<PageTitle>Todo list</PageTitle>

<h1>Todo list</h1>

<ul>
    @foreach (var item in TodoListItems)
    {
        <li class="short-padding-left">
            <TaskItem Item="@item"></TaskItem>
        </li>
    }
    <li class="addItemInput short-padding-left">
        <input
            class="transparentInput"
            value="@NewTodoItemDescription"
            @oninput="e => NewTodoItemDescription = (string)e.Value!"
            @onkeyup="AddItemToDo"/>
    </li>
</ul>

<style>
    .short-padding-left {
        padding-left: 5px;;
    }
    
    .addItemInput {
        list-style: disclosure-closed;
    }
    
    .transparentInput {
        border:0;
        outline:0;
        background-color: transparent;
        padding: 0;
        width: 100%;
    }
    
    .transparentTextArea {
        border:0;
        outline:0;
        background-color: transparent;
        padding: 0;
        width: 100%;
        resize: inherit;
        overflow: hidden;
        min-height: 30px;
        display: block;
    }
    
    .transparentInput:focus {
        outline:none !important;
    }
</style>

@code {

    TodoListState State => GetState<TodoListState>();

    private IEnumerable<TodoListItem> TodoListItems => State.Items;
    private string NewTodoItemDescription { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync() => await Mediator.Send(new TodoListState.LoadTodoList());

    private async Task AddItemToDo(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Mediator.Send(new TodoListState.AddNewItem(NewTodoItemDescription));

            NewTodoItemDescription = string.Empty;
        }
    }

}