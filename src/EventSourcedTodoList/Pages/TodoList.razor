@page "/todolist"
@using EventSourcedTodoList.Actions
@using EventSourcedTodoList.Domain.Todo.List
@inherits BlazorState.BlazorStateComponent

<PageTitle>Todo list</PageTitle>

<h1>Todo list</h1>

<div>
    <InputText @bind-Value="NewTodoItemText"></InputText>

    <button @onclick="AddTodoItem"> Add </button>
</div>

<h2>Items :</h2>

<ul>
    @foreach (var item in TodoListItems)
    {
        <li>
            @if (item.IsCompleted)
            {
                <span style="text-decoration: line-through;">@item.Description</span>
            }
            else
            {
                @item.Description
            }
            <button @onclick="() => CompleteTodoItem(item.Id)">
                <span class="oi oi-home" aria-hidden="true"></span>
            </button>
        </li>
    }
</ul>

@code {

    TodoListState State => GetState<TodoListState>();

    private IEnumerable<TodoListItem> TodoListItems => State.Items;

    string? NewTodoItemText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
    }

    private async Task AddTodoItem()
    {
        await Mediator.Send(new TodoListState.AddNewItem(NewTodoItemText));
    }

    private async Task CompleteTodoItem(Guid itemId)
    {
        await Mediator.Send(new TodoListState.CompleteItem(itemId));
    }

}