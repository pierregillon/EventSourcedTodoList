@page "/"
@using EventSourcedTodoList.Domain.Todo.List
@using EventSourcedTodoList.Actions
@inherits BlazorState.BlazorStateComponent

<PageTitle>Aujourd'hui</PageTitle>

<MudTimeline
    Style="margin-top: 20px"
    TimelineOrientation="TimelineOrientation.Horizontal"
    TimelinePosition="TimelinePosition.Bottom">

    @foreach (var temporality in Enum.GetValues<Temporality>())
    {
        var isCurrent = State.CurrentTemporality == temporality;

        <MudTimelineItem
            Class="timeline-item"
            Color="isCurrent ? Color.Primary : Color.Default"
            Size="isCurrent ? Size.Large : Size.Small"
            @onclick="() => ChangeCurrentTemporality(temporality)">

            <MudText
                Class="@(isCurrent ? "temporality important" : "temporality")"
                Color="isCurrent ? Color.Primary : Color.Dark"
                Align="Align.Center"
                @onclick="() => ChangeCurrentTemporality(temporality)">
                @temporality.ToText()
            </MudText>

        </MudTimelineItem>
    }

</MudTimeline>

<MudContainer MaxWidth="MaxWidth.Small">

    <h1>@State.CurrentTemporality.ToText()</h1>

    <MudDivider Class="items"/>

    <TodoListComponent Temporality="@State.CurrentTemporality"></TodoListComponent>

</MudContainer>

<style>
    .items {
        margin: 15px 0;
    }
    
    .mud-timeline-item.timeline-item > .mud-timeline-item-divider{
        min-height: 90px;
    }
    
    .temporality {
        cursor: pointer;
    }
    
    .temporality.important {
        font-weight: bold
    }
</style>

@code {

    TodoListState State => GetState<TodoListState>();

    protected override async Task OnInitializedAsync()
        => await Mediator.Send(new TodoListState.LoadTodoList(Temporality.ThisDay));

    private async Task ChangeCurrentTemporality(Temporality temporality)
        => await Mediator.Send(new TodoListState.ChangeCurrentTemporality(temporality));

}