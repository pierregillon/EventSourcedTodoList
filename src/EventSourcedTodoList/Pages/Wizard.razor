@using EventSourcedTodoList.Actions
@inherits BlazorState.BlazorStateComponent

<MudDialog>
    <DialogContent>
        <MudTimeline
            TimelineOrientation="TimelineOrientation.Horizontal"
            TimelinePosition="TimelinePosition.Bottom">

            @foreach (var step in Enum.GetValues<TodayTaskPreparationState.TodayTaskPreparationSteps>())
            {
                var isCurrent = step == State.CurrentStep;
                var isBeforeCurrent = step < State.CurrentStep;

                <MudTimelineItem
                    Color="isCurrent || isBeforeCurrent ? Color.Primary : Color.Default"
                    Size="isCurrent ? Size.Large : Size.Small">
                    @switch (step)
                    {
                        case TodayTaskPreparationState.TodayTaskPreparationSteps.EndYesterdayTasks:
                            <MudText Align="Align.Center">Tâches de la veille</MudText>
                            break;
                        case TodayTaskPreparationState.TodayTaskPreparationSteps.AddThisWeekTasks:
                            <MudText Align="Align.Center">Nouvelles tâches</MudText>
                            break;
                        case TodayTaskPreparationState.TodayTaskPreparationSteps.RemoveNotWanted:
                            <MudText Align="Align.Center">Finaliser</MudText>
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </MudTimelineItem>
            }
        </MudTimeline>

        <MudContainer MaxWidth="MaxWidth.Small" Style="padding-top: 24px;">
            @switch (State.CurrentStep)
            {
                case TodayTaskPreparationState.TodayTaskPreparationSteps.EndYesterdayTasks:
                    <MudText Typo="Typo.h4">Clôture des tâches de la veille</MudText>
                    <MudText>
                        Il vous reste des tâches d'hier.
                        Veuillez sélectionner celles que vous avez traitées.
                    </MudText>
                    <br/>
                    @foreach (var item in State.YesterdayUndoneTasks)
                    {
                        <MudCheckBox
                            T="bool"
                            Label="@item.Description"
                            Checked="@item.IsSelected"
                            CheckedChanged="isChecked => item.IsSelected = isChecked"
                            Class="compact"
                            Color="Color.Primary">
                        </MudCheckBox>
                    }
                    break;
                case TodayTaskPreparationState.TodayTaskPreparationSteps.AddThisWeekTasks:
                    <MudText Typo="Typo.h4">Choisir des tâches de la semaine</MudText>
                    <MudText>Compléter vos tâches du jour en choisissant des tâches prévues cette semaine que vous comptez faire aujourd'hui.</MudText>
                    <br/>
                    @foreach (var item in State.ThisWeekUndoneTasks)
                    {
                        <MudCheckBox
                            T="bool"
                            Label="@item.Description"
                            Checked="@item.IsSelected"
                            CheckedChanged="isChecked => item.IsSelected = isChecked"
                            Class="compact"
                            Color="Color.Primary">
                        </MudCheckBox>
                    }
                    break;
                case TodayTaskPreparationState.TodayTaskPreparationSteps.RemoveNotWanted:
                    <MudText Typo="Typo.h4">Finaliser vos tâches</MudText>
                    <MudText>
                        Voici vos tâches du jour.
                        Si vous pensez que vous avez trop de tâches, pouvez en désélectionner : elles seront remises
                        à cette semaine.
                    </MudText>
                    <br/>
                    @foreach (var item in State.ThisDayUndoneTasks)
                    {
                        <MudCheckBox
                            T="bool"
                            Label="@item.Description"
                            Checked="@item.IsSelected"
                            CheckedChanged="isChecked => item.IsSelected = isChecked"
                            Class="compact"
                            Color="Color.Primary">
                        </MudCheckBox>
                    }
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </MudContainer>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        @if (State.CurrentStep == TodayTaskPreparationState.TodayTaskPreparationSteps.RemoveNotWanted)
        {
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Fin</MudButton>
        }
        else
        {
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Next">Suivant</MudButton>
        }
    </DialogActions>
</MudDialog>

<style>
    .mud-timeline-horizontal .mud-timeline-item .mud-timeline-item-divider{
        min-height: 90px;
    }
</style>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    TodayTaskPreparationState State => GetState<TodayTaskPreparationState>();

    protected override async Task OnInitializedAsync()
        => await Mediator.Send(new TodayTaskPreparationState.Load());

    async Task Next() => await Mediator.Send(new TodayTaskPreparationState.MoveToNextPreparationStep());

    async Task Submit()
    {
        await Mediator.Send(new TodayTaskPreparationState.MoveToNextPreparationStep());
        await Mediator.Send(new TodoListState.LoadData());
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

}