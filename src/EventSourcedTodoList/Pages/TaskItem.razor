@using EventSourcedTodoList.Domain.Todo.List
@using EventSourcedTodoList.Actions
@inherits BlazorState.BlazorStateComponent

@if (Item is not null)
{
    <div class="task">
        <div class="d-flex">
            <MudMenu
                Class="overlay-menu"
                Icon="@Icons.Material.Filled.MoreHoriz"
                Size="Size.Small"
                AnchorOrigin="Origin.BottomLeft"
                TransformOrigin="Origin.TopRight">

                @if (NextTemporality != CurrentTemporality)
                {
                    <MudMenuItem
                        Icon="@Icons.Material.Filled.Redo"
                        OnClick="() => Reschedule(Item.Id, NextTemporality)">
                        Déplacer à @NextTemporality.ToText().ToLower()
                    </MudMenuItem>
                }

                @if (PreviousTemporality != CurrentTemporality)
                {
                    <MudMenuItem
                        Icon="@Icons.Material.Filled.Undo"
                        OnClick="() => Reschedule(Item.Id, PreviousTemporality)">
                        Déplacer à @PreviousTemporality.ToText().ToLower()
                    </MudMenuItem>
                }

                <MudMenuItem
                    Icon="@Icons.Material.Filled.Delete"
                    IconColor="Color.Warning"
                    OnClick="() => Delete(Item.Id)">
                    Supprimer
                </MudMenuItem>

            </MudMenu>

            <MudCheckBox
                T="bool"
                Checked="Item.IsDone"
                CheckedChanged="isChecked => isChecked ? MarkItemAsDone(Item.Id) : MarkAsToDo(Item.Id)"
                Class="compact"
                Color="Color.Primary">
            </MudCheckBox>

            <MudTextField
                T="string"
                Class="@(Item.IsDone ? "compact done" : "compact")"
                InputMode="InputMode.text"
                Text="@Item.Description"
                TextChanged="text => FixItemDescription(Item.Id, text)"
                DisableUnderLine="true">
            </MudTextField>
        </div>
    </div>
}

<style>
    .done .mud-input input {
        text-decoration: line-through;
        color: #B4B4B4;
        font-style: italic;
    }
    
    .overlay-menu {
        opacity: 0;
    }
    
    .task:hover .overlay-menu {
        opacity: 0.7;
    }
</style>

@code {

    [Parameter]
    public TodoListItem? Item { get; set; }

    private Temporality NextTemporality => CurrentTemporality.Next();

    private Temporality PreviousTemporality => CurrentTemporality.Previous();

    private Temporality CurrentTemporality => GetState<TodoListState>().CurrentTemporality;

    private async Task FixItemDescription(Guid itemId, string newValue) => await Mediator.Send(new TodoListState.FixItemDescription(itemId, newValue));

    private async Task MarkItemAsDone(Guid itemId) => await Mediator.Send(new TodoListState.MarkItemAsDone(itemId));

    private async Task MarkAsToDo(Guid itemId) => await Mediator.Send(new TodoListState.MarkItemAsToDo(itemId));

    private async Task Reschedule(Guid itemId, Temporality temporality) => await Mediator.Send(new TodoListState.RescheduleTodoItem(itemId, temporality));

    private async Task Delete(Guid itemId) => await Mediator.Send(new TodoListState.DeleteItem(itemId));

}