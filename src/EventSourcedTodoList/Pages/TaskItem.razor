@using EventSourcedTodoList.Domain.Todo.List
@using EventSourcedTodoList.Actions
@inherits BlazorState.BlazorStateComponent

@if (Item is not null)
{
    <div class="task">
        <div class="d-flex">
            <MudCheckBox
                T="bool"
                Checked="Item.IsDone"
                CheckedChanged="isChecked => isChecked ? MarkItemAsDone(Item.Id) : MarkAsToDo(Item.Id)"
                Class="compact"
                Color="Color.Primary">
            </MudCheckBox>

            <MudTextField
                T="string"
                Class="@(Item.IsDone ? "compact done" : "compact")"
                InputMode="InputMode.text"
                Text="@Item.Description"
                TextChanged="text => FixItemDescription(Item.Id, text)"
                DisableUnderLine="true">
            </MudTextField>
        </div>
    </div>
}

<style>
    .done .mud-input input {
        text-decoration: line-through;
        color: #B4B4B4;
        font-style: italic;
    }
</style>

@code {

    [Parameter]
    public TodoListItem? Item { get; set; }

    private async Task FixItemDescription(Guid itemId, string newValue) => await Mediator.Send(new TodoListState.FixItemDescription(itemId, newValue));

    private async Task MarkItemAsDone(Guid itemId) => await Mediator.Send(new TodoListState.MarkItemAsDone(itemId));

    private async Task MarkAsToDo(Guid itemId) => await Mediator.Send(new TodoListState.MarkItemAsToDo(itemId));

}