@using TimeOnion.Domain.Todo.List
@using TimeOnion.Actions
@inherits BlazorState.BlazorStateComponent

@if (TodoList is not null)
{
    <div class="todolist">

        <MudText Typo="Typo.h4">@TodoList.Name</MudText>

        <MudDivider Class="medium"/>

        <div>
            @foreach (var item in TodoList.Items)
            {
                <TodoListItemComponent Item="@item"></TodoListItemComponent>
            }

            <div class="d-flex">
                <MudCheckBox
                    Class="compact fake"
                    Checked="@(false)"
                    Color="Color.Secondary">
                </MudCheckBox>

                <MudTextField
                    T="string"
                    InputMode="InputMode.text"
                    Text="@State.NewTodoItemDescription"
                    TextChanged="itemDescription => AddItemToDo(TodoList.Id, itemDescription)"
                    TextUpdateSuppression="false"
                    Class="compact"
                    DisableUnderLine="true">
                </MudTextField>
            </div>
        </div>

    </div>
}

<style>
    .fake.mud-input-control.mud-input-control-boolean-input {
        margin-left: 26px;
    }
    
    .todolist {
        flex-grow: 1;
    }
</style>

@code {

    [Parameter]
    public TodoListReadModel? TodoList { get; set; }

    TodoListState State => GetState<TodoListState>();

    private async Task AddItemToDo(TodoListId listId, string itemDescription)
        => await Mediator.Send(new TodoListState.AddNewItem(listId, itemDescription));

}