@using TimeOnion.Domain.Todo.List
@using TimeOnion.Actions
@inherits BlazorState.BlazorStateComponent

@if (TodoList is not null)
{
    <div class="todolist">

        <div class="title-actions">
            <MudTextField
                T="string"
                InputMode="InputMode.text"
                Text="@TodoList.Name"
                TextChanged="newName => Rename(TodoList.Id, newName)"
                TextUpdateSuppression="false"
                DebounceInterval="1000"
                Class="compact title"
                DisableUnderLine="true">
            </MudTextField>

            <MudTooltip Text="Supprimer la liste">
                <MudIconButton
                    Class="delete-button"
                    Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"
                    OnClick="() => Delete(TodoList.Id)">
                </MudIconButton>
            </MudTooltip>
        </div>

        <MudDivider Class="medium"/>

        <div>
            @foreach (var item in TodoList.Items)
            {
                <TodoItemComponent Item="@item"></TodoItemComponent>
            }

            <div class="d-flex">
                <MudCheckBox
                    Class="compact fake"
                    Checked="@(false)"
                    Color="Color.Secondary">
                </MudCheckBox>

                <MudTextField
                    T="string"
                    InputMode="InputMode.text"
                    Text="@State.NewTodoItemDescription"
                    TextChanged="itemDescription => AddItemToDo(TodoList.Id, itemDescription)"
                    TextUpdateSuppression="false"
                    Class="compact"
                    DisableUnderLine="true">
                </MudTextField>
            </div>
        </div>

    </div>
}

<style>
    .fake.mud-input-control.mud-input-control-boolean-input {
        margin-left: 26px;
    }
    
    .todolist {
        flex-grow: 1;
    }
    
    .title .mud-input > input {
        font-size: 30px;
    }
    
    .title-actions {
         display: flex;
         align-items: self-end;
         justify-content: center;
         gap: 20px;
         margin-bottom: 30px;
     }
     
     .delete-button {
        opacity: 0;
     }
     
     .title-actions:hover .delete-button {
        opacity: 1;
     }
</style>

@code {

    [Parameter]
    public TodoListReadModel? TodoList { get; set; }

    TodoListState State => GetState<TodoListState>();

    private async Task AddItemToDo(TodoListId listId, string itemDescription)
        => await Mediator.Send(new TodoListState.AddNewItem(listId, itemDescription));

    private async Task Rename(TodoListId todoListId, string newName)
        => await Mediator.Send(new TodoListState.RenameTodoList(todoListId, newName));

    private async Task Delete(TodoListId todoListId)
        => await Mediator.Send(new TodoListState.DeleteTodoList(todoListId));

}