@page "/"
@attribute [Authorize]
@using TimeOnion.Domain.Todo.Core
@using TimeOnion.Pages.TodoListPage.Details
@using TimeOnion.Pages.TodoListPage.List.Actions
@using TimeOnion.Pages.TodoListPage.List.Components
@inherits TimeOnion.Shared.MVU.BlazorStateComponent

<PageTitle>Time Onion</PageTitle>

<TimeHorizonSelector></TimeHorizonSelector>

<div class="d-flex align-center justify-center gap-3 mb-4">
    <MudText Typo="Typo.h4">
        @State.CurrentTimeHorizon.ToText()
    </MudText>

    <MudIconButton
        Icon="@Icons.Material.Filled.PlaylistAdd"
        OnClick="() => Execute(new CreateNewTodoListAction())"
        Color="Color.Primary">
    </MudIconButton>

    <MudMenu
        @ref="_mudMenu"
        Icon="@Icons.Material.Filled.MoreHoriz"
        Size="Size.Small"
        AnchorOrigin="Origin.BottomCenter">

        <ActivatorContent>
            @switch (State.CurrentCategoryVisibility)
            {
                case CategoryVisibility.ShowAll:
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Folder"
                        Color="Color.Success">
                    </MudIconButton>
                    break;
                case CategoryVisibility.HideWithoutItems:
                    <MudIconButton
                        Icon="@Icons.Material.Filled.RuleFolder"
                        Color="Color.Primary">
                    </MudIconButton>
                    break;
                case CategoryVisibility.HideAll:
                    <MudIconButton
                        Icon="@Icons.Material.Filled.FolderOff"
                        Color="Color.Warning">
                    </MudIconButton>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

        </ActivatorContent>

        <ChildContent>
            <MudListItem
                Icon="@Icons.Material.Filled.Folder"
                IconColor="Color.Success"
                OnClick="ShowAllCategories">
                Afficher les catégories
            </MudListItem>

            <MudListItem
                Icon="@Icons.Material.Filled.RuleFolder"
                IconColor="Color.Primary"
                OnClick="HideCategoriesWithNotItems">
                Masquer les catégories sans tâches
            </MudListItem>

            <MudListItem
                Icon="@Icons.Material.Filled.FolderOff"
                IconColor="Color.Warning"
                OnClick="HideAllCategories">
                Masquer toutes les catégories
            </MudListItem>
        </ChildContent>


    </MudMenu>

</div>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <div class="d-flex align-start justify-space-around flex-wrap flex-grow-1 gap-8">
        @foreach (var todoList in State.TodoLists)
        {
            <TodoListComponent
                @key="todoList.Id"
                TodoList="@todoList"
                TimeHorizon="@State.CurrentTimeHorizon"
                CategoryVisibility="@State.CurrentCategoryVisibility">
            </TodoListComponent>
        }
    </div>
</MudContainer>

<div class="mb-10"></div>

@code {

    TodoListState State => GetState<TodoListState>();

    protected override async Task OnInitializedAsync() => await Execute(new LoadListsAction());

    private MudMenu _mudMenu = default!;

    private async Task ShowAllCategories()
    {
        _mudMenu.CloseMenu();

        await Execute(new ShowAllCategoriesAction());
    }

    private async Task HideCategoriesWithNotItems()
    {
        _mudMenu.CloseMenu();

        await Execute(new HideCategoriesWithoutItemsAction());
    }

    private async Task HideAllCategories()
    {
        _mudMenu.CloseMenu();

        await Execute(new HideAllCategoriesAction());
    }

}