@using TimeOnion.Domain.Todo.Core
@using TimeOnion.Domain.Todo.UseCases
@using TimeOnion.Pages.TodoListPage.Details.Actions.Items
@using TimeOnion.Pages.TodoListPage.List
@using TimeOnion.Domain.Categories
@using TimeOnion.Domain.Categories.Core
@inherits TimeOnion.Shared.MVU.BlazorStateComponent

<div>
    @if (TodoListId is not null)
    {
        @if (CategoryVisibility == CategoryVisibility.HideAll)
        {
            @foreach (var item in Items)
            {
                <TodoItemComponent
                    @key="item.Id"
                    Item="@item"
                    ShowOffsetInCategory="false">
                </TodoItemComponent>
            }
        }
        else
        {
            <MudDropContainer
                @ref="_container"
                T="TodoListItemReadModel"
                Items="Items"
                ItemsSelector="@((item, dropzone) => true)"
                ItemDropped="info => info.Item is not null ? UpdateItem(info.Item.ListId, info.Item.Id, info.IndexInZone, info.DropzoneIdentifier) : Task.CompletedTask">
                <ChildContent>
                    @foreach (var category in Categories)
                    {
                        <MudDropZone
                            T="TodoListItemReadModel"
                            Identifier="@category.Id.Value.ToString()"
                            Style="transition: none"
                            Class="category"
                            AllowReorder="true"
                            ItemIsDisabled="_ => true"
                            ItemsSelector="model => model.CategoryId == category.Id"
                            CanDropClass="border-2 border-dashed mud-border-lines-default mud-border-secondary">

                            <CategoryComponent Category="@category"></CategoryComponent>

                        </MudDropZone>
                    }

                    <MudDropZone
                        T="TodoListItemReadModel"
                        Identifier=""
                        AllowReorder="true"
                        ItemIsDisabled="_ => true"
                        ItemsSelector="model => model.CategoryId is null"/>
                </ChildContent>
                <ItemRenderer>
                    <TodoItemComponent Item="@context" ShowOffsetInCategory="true"></TodoItemComponent>
                </ItemRenderer>
            </MudDropContainer>
        }

        <div class="d-flex gap-1">

            <MudMenu
                Class="invisible d-none d-md-flex"
                Icon="@Icons.Material.Filled.MoreHoriz"
                Size="Size.Small">
            </MudMenu>

            <MudIconButton
                Icon="@Icons.Material.Filled.Add"
                Size="Size.Small"
                Color="Color.Primary"
                OnClick="_ => Execute(new InsertNewItemToDoAtTheEndAction(TodoListId))">
            </MudIconButton>
        </div>
    }
</div>

@inject IJSRuntime JavascriptRuntime;

@code {

    [Parameter]
    public TodoListId? TodoListId { get; set; }

    [Parameter]
    public IReadOnlyCollection<TodoListItemReadModel> Items { get; set; } = Array.Empty<TodoListItemReadModel>();

    [Parameter]
    public IReadOnlyCollection<CategoryReadModel> Categories { get; set; } = Array.Empty<CategoryReadModel>();

    [Parameter]
    public CategoryVisibility CategoryVisibility { get; set; }

    private MudDropContainer<TodoListItemReadModel>? _container;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await JavascriptRuntime.InvokeAsync<string>("enableTouchOnMudDropItems", Array.Empty<object?>());
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        _container?.Refresh();
    }

    private async Task UpdateItem(TodoListId listId, TodoItemId itemId, int indexInCategory, string targetCategoryIdString)
    {
        var targetIdCategory = !string.IsNullOrWhiteSpace(targetCategoryIdString)
            ? CategoryId.From(targetCategoryIdString)
            : null;

        await UpdateItemCategory(listId, itemId, targetIdCategory);
        await UpdateItemPosition(listId, itemId, indexInCategory, targetIdCategory);
    }

    private async Task UpdateItemCategory(TodoListId listId, TodoItemId itemId, CategoryId? targetIdCategory)
    {
        var currentItem = Items.ToList().First(x => x.Id == itemId);

        if (targetIdCategory is not null)
        {
            if (currentItem.CategoryId != targetIdCategory)
            {
                await Execute(new CategorizeItemAction(listId, itemId, targetIdCategory));
            }
        }
        else if (currentItem.CategoryId is not null)
        {
            await Execute(new DecategorizeItemAction(listId, itemId));
        }
    }

    private async Task UpdateItemPosition(TodoListId listId, TodoItemId itemId, int indexInCategory, CategoryId? targetIdCategory)
    {
        var currentItem = Items.First(x => x.Id == itemId);
        var itemsInSameCategory = Items
            .Where(x => x.CategoryId == targetIdCategory)
            .ToList();

        var currentItemIndex = itemsInSameCategory.IndexOf(currentItem);
        if (currentItemIndex < indexInCategory)
        {
            indexInCategory++;
        }

        var referenceItem = itemsInSameCategory.Where((_, i) => i == indexInCategory).FirstOrDefault();
        if (referenceItem is not null && referenceItem.Id != itemId)
        {
            await Execute(new RepositionItemAboveAnotherAction(listId, itemId, referenceItem.Id));
        }
        else if (referenceItem is null)
        {
            await Execute(new RepositionItemAtTheEndAction(listId, itemId));
        }
    }

}