@using TimeOnion.Domain.Todo.Core
@using TimeOnion.Domain.Todo.UseCases
@using TimeOnion.Pages.TodoListPage.Details.Actions.Items
@using TimeOnion.Pages.TodoListPage.List
@inherits TimeOnion.Shared.MVU.BlazorStateComponent

<MudMenu
    @ref="_mudMenu"
    UserAttributes="@(new Dictionary<string, object> { { "draggable", "true" } })"
    Class="@Class"
    Icon="@Icons.Material.Filled.MoreHoriz"
    Size="Size.Small"
    AnchorOrigin="Origin.BottomCenter">

    @if (NextTimeHorizons != CurrentTimeHorizons)
    {
        <MudListItem
            Icon="@Icons.Material.Filled.Redo"
            OnClick="() => Reschedule(Item.ListId, Item.Id, NextTimeHorizons)">
            Reporter à @NextTimeHorizons.ToText().ToLower()
        </MudListItem>
    }

    @if (PreviousTimeHorizons != CurrentTimeHorizons)
    {
        <MudListItem
            Icon="@Icons.Material.Filled.Undo"
            OnClick="() => Reschedule(Item.ListId, Item.Id, PreviousTimeHorizons)">
            Avancer à @PreviousTimeHorizons.ToText().ToLower()
        </MudListItem>
    }

    <MudListItem
        Icon="@Icons.Material.Filled.Delete"
        IconColor="Color.Warning"
        OnClick="Delete">
        Supprimer
    </MudListItem>

</MudMenu>

@code {

    private MudMenu _mudMenu = default!;

    [Parameter]
    public TodoListItemReadModel Item { get; set; } = default!;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    private TimeHorizons NextTimeHorizons => CurrentTimeHorizons.Next();

    private TimeHorizons PreviousTimeHorizons => CurrentTimeHorizons.Previous();

    private TimeHorizons CurrentTimeHorizons => GetState<TodoListState>().CurrentTimeHorizon;

    private async Task Reschedule(TodoListId itemListId, TodoItemId itemId, TimeHorizons timeHorizon)
    {
        _mudMenu.CloseMenu();

        await Execute(new RescheduleTodoItemAction(Item.ListId, Item.Id, timeHorizon));
    }

    private async Task Delete()
    {
        _mudMenu.CloseMenu();

        await Execute(new DeleteItemAction(Item.ListId, Item.Id));
    }

}