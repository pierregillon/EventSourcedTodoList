<div class="full-width">

    <textarea 
        @ref="_textArea"
        class="@(IsStrikeThrough ? $"strikeThrough compact {Class}" : $"compact {Class}")"
        value="@_boundedText" 
        @oninput="@OnInput"
        onblur="@OnBlur"
        onkeydown="@OnKeyDown"
        data-test="@DataTest"
    >
    </textarea>
</div>

@inject IJSRuntime JavascriptRuntime;

@code {

    [Parameter]
    public EventCallback<string> TextChanged { get; set; }

    [Parameter]
    public EventCallback<string> EnterPressed { get; set; }

    [Parameter]
    public EventCallback DeletionTriggered { get; set; }

    [Parameter]
    public string Text { get; set; } = string.Empty;

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public bool IsStrikeThrough { get; set; }

    [Parameter]
    public string DataTest { get; set; } = string.Empty;

    string _boundedText = string.Empty;
    private ElementReference _textArea;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(Text), out var value))
        {
            _boundedText = value;
        }

        return base.SetParametersAsync(parameters);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JavascriptRuntime.InvokeAsync<string>("autoResizeTextArea", _textArea);
        }
    }

    private void OnInput(ChangeEventArgs args) => _boundedText = (string?)args.Value ?? string.Empty;

    private async Task OnKeyDown(KeyboardEventArgs obj)
    {
        if (obj.Key == "Backspace" && string.IsNullOrEmpty(_boundedText))
        {
            await DeletionTriggered.InvokeAsync();
        }
        else if (obj.Key == "Enter")
        {
            var caretPosition = await JavascriptRuntime.InvokeAsync<int>("getSelectedStart", _textArea);
            var textBeforeCaret = _boundedText[..caretPosition];
            var textAfterCaret = _boundedText[caretPosition..];
            if (textBeforeCaret != Text)
            {
                await TextChanged.InvokeAsync(textBeforeCaret);
            }
            await EnterPressed.InvokeAsync(textAfterCaret);
        }
    }

    private async Task OnBlur(FocusEventArgs obj)
    {
        if (_boundedText != Text)
        {
            await AcceptChanges();
        }
    }

    private async Task AcceptChanges()
    {
        if (_boundedText != Text)
        {
            await TextChanged.InvokeAsync(_boundedText);
        }
    }

    public async Task Focus() => await _textArea.FocusAsync();

}