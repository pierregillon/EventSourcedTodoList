@using TimeOnion.Domain.Todo.UseCases
@using TimeOnion.Pages.TodoListPage.Actions.Details.Categories
@using TimeOnion.Pages.TodoListPage.Actions.Details.Items
@using TimeOnion.Pages.TodoListPage.Actions.List
@using TimeOnion.Domain.Categories
@inherits TimeOnion.Shared.MVU.BlazorStateComponent

<div class="flex-grow-1" style="max-width: 700px">
    <div class="overlay-parent d-flex align-center gap-3">
        <TodoListActionsComponent
            TodoList="@TodoList"
            Class="invisible overlay d-none d-md-flex">
        </TodoListActionsComponent>

        <MudIcon
            Icon="@Icons.Material.Filled.Checklist"
            Color="Color.Primary"
            Size="Size.Large">
        </MudIcon>

        <TextEditor
            Class="title"
            Text="@TodoList.Name"
            TextChanged="newName => Execute(new RenameTodoListAction(TodoList.Id, newName))">
        </TextEditor>

        <TodoListActionsComponent
            TodoList="@TodoList"
            Class="d-flex d-md-none">
        </TodoListActionsComponent>

    </div>

    <MudDivider Class="mt-2 mb-2"/>

    <TodoItemsComponent
        TodoListId="@TodoList.Id"
        Items="@Items"
        Categories="@Categories">
    </TodoItemsComponent>
</div>

@code {

    [Parameter]
    public TodoListReadModel TodoList { get; set; } = default!;

    TodoListDetailsState State => GetState<TodoListDetailsState>();

    IReadOnlyCollection<TodoListItemReadModel> Items => State.Get(TodoList.Id).TodoListItems;

    IReadOnlyCollection<CategoryReadModel> Categories => State.Get(TodoList.Id).Categories;

    private MudDropContainer<TodoListItemReadModel>? _container;

    protected override async Task OnInitializedAsync()
    {
        await Execute(new LoadCategoriesAction(TodoList.Id));
        await Execute(new LoadTodoListItemsAction(TodoList.Id));

        await base.OnInitializedAsync();
    }

}