@using TimeOnion.Domain.Todo.UseCases
@using TimeOnion.Domain.Todo.Core
@inherits BlazorState.BlazorStateComponent

@if (TodoList is not null)
{
    <div>
        <div class="overlay-parent d-flex align-end justify-center gap-3">
            <MudTextField
                T="string"
                InputMode="InputMode.text"
                Text="@TodoList.Name"
                TextChanged="newName => Rename(TodoList.Id, newName)"
                TextUpdateSuppression="false"
                DebounceInterval="1000"
                Class="compact title"
                DisableUnderLine="true">
            </MudTextField>

            <MudTooltip Text="Créer une catégorie">
                <MudIconButton
                    Class="invisible overlay"
                    Icon="@Icons.Material.Filled.CreateNewFolder"
                    Color="Color.Primary"
                    OnClick="() => CreateNewCategory(TodoList.Id)">
                </MudIconButton>
            </MudTooltip>

            <MudTooltip Text="Supprimer la liste">
                <MudIconButton
                    Class="invisible overlay"
                    Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"
                    OnClick="() => Delete(TodoList.Id)">
                </MudIconButton>
            </MudTooltip>
        </div>

        <MudDivider Class="mt-4 mb-4"/>

        <TodoItemsComponent TodoListId="@TodoList.Id"></TodoItemsComponent>
    </div>
}

@code {

    [Parameter]
    public TodoListReadModel? TodoList { get; set; }

    private async Task Rename(TodoListId listId, string newName)
        => await Mediator.Send(new TodoListState.RenameTodoList(listId, newName));

    private async Task CreateNewCategory(TodoListId listId)
        => await Mediator.Send(new TodoListState.CreateNewCategory(listId, "Nouvelle catégorie"));

    private async Task Delete(TodoListId listId)
        => await Mediator.Send(new TodoListState.DeleteTodoList(listId));

}