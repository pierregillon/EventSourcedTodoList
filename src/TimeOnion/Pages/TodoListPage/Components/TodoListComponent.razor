@using TimeOnion.Domain.Todo.List
@using TimeOnion.Pages.TodayTaskPreparation
@inherits BlazorState.BlazorStateComponent

@if (TodoList is not null)
{
    <div class="todolist">

        <div class="todolist-actions">
            <MudTextField
                T="string"
                InputMode="InputMode.text"
                Text="@TodoList.Name"
                TextChanged="newName => Rename(TodoList.Id, newName)"
                TextUpdateSuppression="false"
                DebounceInterval="1000"
                Class="compact title"
                DisableUnderLine="true">
            </MudTextField>

            <MudTooltip Text="Supprimer la liste">
                <MudIconButton
                    Class="delete-button"
                    Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"
                    OnClick="() => Delete(TodoList.Id)">
                </MudIconButton>
            </MudTooltip>
        </div>

        <MudDivider Class="medium"/>

        <div>
            <MudDropContainer
                @ref="_container"
                T="TodoListItemReadModel"
                Items="TodoList.Items"
                ItemsSelector="@((item, dropzone) => true)"
                ItemDropped="info => info.Item is not null ? Reposition(info.Item.ListId, info.Item.Id, info.IndexInZone) : Task.CompletedTask">
                <ChildContent>
                    <MudDropZone
                        T="TodoListItemReadModel"
                        Identifier="myid"
                        AllowReorder="true"/>
                </ChildContent>
                <ItemRenderer>
                    <TodoItemComponent Item="@context"></TodoItemComponent>
                </ItemRenderer>
            </MudDropContainer>

            <div class="d-flex">
                <MudCheckBox
                    Class="compact fake"
                    Checked="@(false)"
                    Color="Color.Secondary">
                </MudCheckBox>

                <MudTextField
                    T="string"
                    InputMode="InputMode.text"
                    Text="@State.NewTodoItemDescription"
                    TextChanged="itemDescription => AddItemToDo(TodoList.Id, itemDescription)"
                    TextUpdateSuppression="false"
                    Class="compact"
                    DisableUnderLine="true">
                </MudTextField>
            </div>
        </div>

    </div>
}

<style>
    .fake.mud-input-control.mud-input-control-boolean-input {
        margin-left: 26px;
    }
    
    .todolist {
        flex-grow: 1;
        max-width: 600px;
    }
    
    .title .mud-input > input {
        font-size: 30px;
    }
    
    .todolist-actions {
         display: flex;
         align-items: self-end;
         justify-content: center;
         gap: 20px;
     }
     
     .delete-button {
        opacity: 0;
     }
     
     .todolist-actions:hover .delete-button {
        opacity: 1;
     }
     
     .mud-drop-item-preview-start{
        top: -20px;
     }
</style>

@code {

    [Parameter]
    public TodoListReadModel? TodoList { get; set; }

    TodoListState State => GetState<TodoListState>();

    private MudDropContainer<TodoListItemReadModel>? _container;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (parameters.TryGetValue<TodoListReadModel?>(nameof(TodoList), out _))
        {
            _container?.Refresh();
        }
    }

    private async Task AddItemToDo(TodoListId listId, string itemDescription)
        => await Mediator.Send(new TodoListState.AddNewItem(listId, itemDescription));

    private async Task Rename(TodoListId listId, string newName)
        => await Mediator.Send(new TodoListState.RenameTodoList(listId, newName));

    private async Task Reposition(TodoListId listId, TodoItemId itemId, int index)
    {
        var currentItemIndex = TodoList?.Items
            .Where(x => x.Id == itemId)
            .Select((_, i) => i)
            .FirstOrDefault();

        if (currentItemIndex < index)
        {
            index++;
        }
        
        var referenceItem = TodoList?.Items.Where((_, i) => i == index).FirstOrDefault();
        if (referenceItem is not null && referenceItem.Id != itemId)
        {
            await Mediator.Send(new TodoListState.RepositionItemAboveAnother(listId, itemId, referenceItem.Id));
        }
        else if (referenceItem is null)
        {
            await Mediator.Send(new TodoListState.RepositionItemAtTheEnd(listId, itemId));
        }
    }

    private async Task Delete(TodoListId listId)
        => await Mediator.Send(new TodoListState.DeleteTodoList(listId));

}