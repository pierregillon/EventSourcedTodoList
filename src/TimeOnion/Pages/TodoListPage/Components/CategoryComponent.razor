@using TimeOnion.Domain.Categories
@using TimeOnion.Domain.Categories.Core
@using TimeOnion.Domain.Todo.Core
@using BlazorState
@inherits BlazorState.BlazorStateComponent

@if (Category is not null)
{
    <div class="overlay-parent d-flex gap-1 align-center">
        <MudMenu
            Class="invisible overlay d-none d-md-flex"
            Icon="@Icons.Material.Filled.MoreHoriz"
            Size="Size.Small"
            AnchorOrigin="Origin.BottomCenter">

            <MudMenuItem
                Icon="@Icons.Material.Filled.Delete"
                IconColor="Color.Warning"
                OnClick="@(() => Send(new TodoListState.DeleteCategory(Category.Id, Category.ListId)))">
                Supprimer
            </MudMenuItem>

        </MudMenu>

        <MudIcon
            Icon="@Icons.Material.Filled.Folder"
            Color="Color.Primary"
            Size="Size.Large">
        </MudIcon>

        <TextEditor
            Text="@Category.Name"
            TextChanged="@(text => Send(new TodoListState.RenameCategory(Category.Id, text, Category.ListId)))"
            EnterPressed="@(() => Send(new TodoListState.InsertNewItemToDoOnTopOfCategory(Category.ListId, Category.Id)))">
        </TextEditor>
    </div>
}

@code {

    [Parameter]
    public CategoryReadModel? Category { get; set; }

    private Task Send(IAction action) => Mediator.Send(action);
}