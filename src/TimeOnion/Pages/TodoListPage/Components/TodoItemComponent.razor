@using TimeOnion.Domain.Todo.Core
@using TimeOnion.Domain.Todo.UseCases
@using TimeOnion.Pages.TodoListPage.Actions.Details.Items
@inherits BlazorState.BlazorStateComponent

@if (Item is not null)
{
    <div class="d-flex gap-1 align-center overlay-parent">
        @if (Item.CategoryId is not null)
        {
            <div class="ml-12 mr-1 border-l-2 border-dotted mud-border-primary d-none d-md-flex"></div>
            <div class="ml-4 mr-1 border-l-2 border-dotted mud-border-primary d-flex d-md-none"></div>
        }
        <MudMenu
            UserAttributes="@(new Dictionary<string, object> { { "draggable", "true" } })"
            Class="invisible overlay align-self-start d-none d-md-flex"
            Icon="@Icons.Material.Filled.MoreHoriz"
            Size="Size.Small"
            AnchorOrigin="Origin.BottomCenter">

            @if (NextTimeHorizons != CurrentTimeHorizons)
            {
                <MudMenuItem
                    Icon="@Icons.Material.Filled.Redo"
                    OnClick="() => Reschedule(Item.ListId, Item.Id, NextTimeHorizons)">
                    Reporter à @NextTimeHorizons.ToText().ToLower()
                </MudMenuItem>
            }

            @if (PreviousTimeHorizons != CurrentTimeHorizons)
            {
                <MudMenuItem
                    Icon="@Icons.Material.Filled.Undo"
                    OnClick="() => Reschedule(Item.ListId, Item.Id, PreviousTimeHorizons)">
                    Avancer à @PreviousTimeHorizons.ToText().ToLower()
                </MudMenuItem>
            }

            <MudMenuItem
                Icon="@Icons.Material.Filled.Delete"
                IconColor="Color.Warning"
                OnClick="() => Delete(Item.ListId, Item.Id)">
                Supprimer
            </MudMenuItem>

        </MudMenu>

        <MudCheckBox
            T="bool"
            Checked="Item.IsDone"
            CheckedChanged="isChecked => isChecked ? MarkItemAsDone(Item.ListId, Item.Id) : MarkAsToDo(Item.ListId, Item.Id)"
            Class="compact"
            Color="Color.Primary">
        </MudCheckBox>


        <TextEditor
            @ref="_textEditor"
            Text="@Item.Description"
            TextChanged="text => EditItemDescription(Item.ListId, Item.Id, text)"
            EnterPressed="() => InsertNewItemToDo(Item.ListId, Item.Id)"
            DeletionTriggered="() => Delete(Item.ListId, Item.Id)"
            IsStrikeThrough="@Item.IsDone">
        </TextEditor>
    </div>
}

@code {

    TextEditor _textEditor = default!;

    [Parameter]
    public TodoListItemReadModel? Item { get; set; }

    private TimeHorizons NextTimeHorizons => CurrentTimeHorizons.Next();

    private TimeHorizons PreviousTimeHorizons => CurrentTimeHorizons.Previous();

    private TimeHorizons CurrentTimeHorizons => GetState<TodoListState>().CurrentTimeHorizon;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (Item is TodoListItemReadModelBeingCreated)
        {
            await _textEditor.Focus();
        }
    }

    private async Task EditItemDescription(TodoListId listId, TodoItemId itemId, string newValue) => await Mediator.Send(new TodoListState.EditItemDescription(listId, itemId, newValue));

    private async Task MarkItemAsDone(TodoListId listId, TodoItemId itemId) => await Mediator.Send(new TodoListState.MarkItemAsDone(listId, itemId));

    private async Task MarkAsToDo(TodoListId listId, TodoItemId itemId) => await Mediator.Send(new TodoListState.MarkItemAsToDo(listId, itemId));

    private async Task Reschedule(TodoListId listId, TodoItemId itemId, TimeHorizons timeHorizons) => await Mediator.Send(new TodoListState.RescheduleTodoItem(listId, itemId, timeHorizons));

    private async Task Delete(TodoListId listId, TodoItemId itemId) => await Mediator.Send(new TodoListState.DeleteItem(listId, itemId));

    private async Task InsertNewItemToDo(TodoListId listId, TodoItemId itemId)
        => await Mediator.Send(new TodoListState.InsertNewItemToDo(listId, itemId));

}